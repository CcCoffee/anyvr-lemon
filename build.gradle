import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'c'
    id 'application'
}

repositories {
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'io.netty', name: 'netty-all', version: '4.1.34.Final'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.7.0'
    compile group: 'com.google.guava', name: 'guava', version: '27.1-jre'
    testCompile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.26'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'

}

group 'anyvr.app.lemon'
sourceCompatibility = 1.11
mainClassName = 'anyvr.app.lemon.VoiceStreamingServer'

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'anyvr.app.lemon.VoiceStreamingServer'
        )
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task copyOpusNativeLib(type: Copy) {
    if (OperatingSystem.current().isMacOsX()) {
        from file("$buildDir/libs/opusjni/shared/libopusjni.dylib")
        into file("libs")
    } else if (OperatingSystem.current().isLinux()) {
        from file("$buildDir/libs/opusjni/shared/libopusjni.so")
        into file("libs")
    }
}

model {
    platforms {
        os_x {
            architecture 'x86_64'
            operatingSystem 'mac os x'
        }
        linux_amd64 {
            architecture 'amd64'
            operatingSystem 'linux'
        }
    }

    repositories {
        if (OperatingSystem.current().isMacOsX()) {
            libs(PrebuiltLibraries) {
                opus {
                    binaries.withType(PrebuiltSharedLibraryBinary) {
                        sharedLibraryFile = file("/usr/local/Cellar/opus/1.3/lib/libopus.dylib")
                    }
                }
            }
        } else if (OperatingSystem.current().isLinux()) {
            libs(PrebuiltLibraries) {
                opus {
                    binaries.withType(PrebuiltSharedLibraryBinary) {
                        sharedLibraryFile = file("/usr/local/lib/libopus.so")
                    }
                }
            }
        }
    }

    components {
        if (OperatingSystem.current().isMacOsX()) {
            opusjni(NativeLibrarySpec) {
                binaries.all {
                    lib library: 'opus', linkage: 'shared'
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/darwin"
                }
            }
        } else if(OperatingSystem.current().isLinux()) {
            opusjni(NativeLibrarySpec) {
                binaries.all {
                    lib library: 'opus', linkage: 'shared'
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include"
                    cCompiler.args '-I', "${Jvm.current().javaHome}/include/linux"
                }
            }
        }
    }
}

build.dependsOn 'copyOpusNativeLib'
copyOpusNativeLib.mustRunAfter 'opusjniSharedLibrary'
